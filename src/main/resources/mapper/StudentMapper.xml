<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.system.dao.interfaces.StudentMapper">
  <resultMap id="BaseResultMap" type="com.system.model.Student">
    <constructor>
      <idArg column="student_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="class_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="tutor_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="specialty_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="password" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="sex" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="birthday" javaType="java.util.Date" jdbcType="DATE" />
      <arg column="phonenumber" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="address" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    student_id, class_id, tutor_id, specialty_id, name, password, sex, birthday, phonenumber, 
    address
  </sql>
  <select id="selectByExample" parameterType="com.system.model.StudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from student
    where student_id = #{student_id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from student
    where student_id = #{student_id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.system.model.StudentExample">
    delete from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.system.model.Student">
    insert into student (student_id, class_id, tutor_id, 
      specialty_id, name, password, 
      sex, birthday, phonenumber, 
      address)
    values (#{student_id,jdbcType=INTEGER}, #{class_id,jdbcType=INTEGER}, #{tutor_id,jdbcType=INTEGER}, 
      #{specialty_id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{sex,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE}, #{phonenumber,jdbcType=VARCHAR}, 
      #{address,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.system.model.Student">
    insert into student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="student_id != null">
        student_id,
      </if>
      <if test="class_id != null">
        class_id,
      </if>
      <if test="tutor_id != null">
        tutor_id,
      </if>
      <if test="specialty_id != null">
        specialty_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="phonenumber != null">
        phonenumber,
      </if>
      <if test="address != null">
        address,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="student_id != null">
        #{student_id,jdbcType=INTEGER},
      </if>
      <if test="class_id != null">
        #{class_id,jdbcType=INTEGER},
      </if>
      <if test="tutor_id != null">
        #{tutor_id,jdbcType=INTEGER},
      </if>
      <if test="specialty_id != null">
        #{specialty_id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=DATE},
      </if>
      <if test="phonenumber != null">
        #{phonenumber,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.system.model.StudentExample" resultType="java.lang.Long">
    select count(*) from student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update student
    <set>
      <if test="record.student_id != null">
        student_id = #{record.student_id,jdbcType=INTEGER},
      </if>
      <if test="record.class_id != null">
        class_id = #{record.class_id,jdbcType=INTEGER},
      </if>
      <if test="record.tutor_id != null">
        tutor_id = #{record.tutor_id,jdbcType=INTEGER},
      </if>
      <if test="record.specialty_id != null">
        specialty_id = #{record.specialty_id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=VARCHAR},
      </if>
      <if test="record.birthday != null">
        birthday = #{record.birthday,jdbcType=DATE},
      </if>
      <if test="record.phonenumber != null">
        phonenumber = #{record.phonenumber,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update student
    set student_id = #{record.student_id,jdbcType=INTEGER},
      class_id = #{record.class_id,jdbcType=INTEGER},
      tutor_id = #{record.tutor_id,jdbcType=INTEGER},
      specialty_id = #{record.specialty_id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=VARCHAR},
      birthday = #{record.birthday,jdbcType=DATE},
      phonenumber = #{record.phonenumber,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.system.model.Student">
    update student
    <set>
      <if test="class_id != null">
        class_id = #{class_id,jdbcType=INTEGER},
      </if>
      <if test="tutor_id != null">
        tutor_id = #{tutor_id,jdbcType=INTEGER},
      </if>
      <if test="specialty_id != null">
        specialty_id = #{specialty_id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=DATE},
      </if>
      <if test="phonenumber != null">
        phonenumber = #{phonenumber,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
    </set>
    where student_id = #{student_id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.system.model.Student">
    update student
    set class_id = #{class_id,jdbcType=INTEGER},
      tutor_id = #{tutor_id,jdbcType=INTEGER},
      specialty_id = #{specialty_id,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      birthday = #{birthday,jdbcType=DATE},
      phonenumber = #{phonenumber,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR}
    where student_id = #{student_id,jdbcType=INTEGER}
  </update>
</mapper>